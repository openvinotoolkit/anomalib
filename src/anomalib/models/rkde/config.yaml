dataset:
  name: ucsd #options: [mvtec, btech, folder]
  format: ucsdped
  path: ./datasets/ucsd
  category: UCSDped2
  task: detection
  clip_length_in_frames: 1
  frames_between_clips: 10
  image_size: [240, 360] # RKDE region- and feature extractor apply custom resizing
  normalization: none # RKDE region- and feature extractor apply custom normalization
  train_batch_size: 32
  eval_batch_size: 32
  num_workers: 8
  transform_config:
    train: null
    eval: null
  test_split_mode: from_dir
  test_split_ratio: 0.2
  val_split_mode: same_as_test # options: [same_as_test, from_test]
  val_split_ratio: 0.5
  noise_type: "perlin_2d"
  tiling:
    apply: false
    tile_size: null
    stride: null
    remove_border_count: 0
    use_random_tiling: False
    random_tile_count: 16

model:
  name: rkde
  # region extraction params
  roi_stage: rcnn # Processing stage of the region extractor that yields the box proposals. Options: [rpn, rcnn]
  roi_score_threshold: 0.009 # confidence score threshold for box proposals, (rpn: objectness, rcnn: class score)
  min_box_size: 8
  iou_threshold: 0.3
  max_detections_per_image: 100
  # density estimation params
  n_pca_components: 16
  max_training_points: 40000
  feature_scaling_method: scale # Determines how the feature embeddings are scaled. Options: [scale, norm]
  # generic params
  normalization_method: min_max # options: [null, min_max, cdf]

metrics:
  image:
    - F1Score
    - AUROC
  threshold:
    method: adaptive #options: [adaptive, manual]
    manual_image: null
    manual_pixel: null

visualization:
  show_images: False # show images on the screen
  save_images: True # save images to the file system
  log_images: False # log images to the available loggers (if any)
  image_save_path: null # path to which images will be saved
  mode: full # options: ["full", "simple"]

project:
  seed: 42
  path: ./results

logging:
  logger: [] # options: [comet, tensorboard, wandb, csv] or combinations.
  log_graph: false # Logs the model graph to respective logger.

optimization:
  export_mode: null # options: torch, onnx, openvino
# PL Trainer Args. Don't add extra parameter here.
trainer:
  enable_checkpointing: true
  default_root_dir: null
  gradient_clip_val: 0
  gradient_clip_algorithm: norm
  num_nodes: 1
  devices: 1
  enable_progress_bar: true
  overfit_batches: 0.0
  track_grad_norm: -1
  check_val_every_n_epoch: 1 # Don't validate before extracting features.
  fast_dev_run: false
  accumulate_grad_batches: 1
  max_epochs: 1
  min_epochs: null
  max_steps: -1
  min_steps: null
  max_time: null
  limit_train_batches: 1.0
  limit_val_batches: 1.0
  limit_test_batches: 1.0
  limit_predict_batches: 1.0
  val_check_interval: 1.0 # Don't validate before extracting features.
  log_every_n_steps: 50
  accelerator: auto # <"cpu", "gpu", "tpu", "ipu", "hpu", "auto">
  strategy: null
  sync_batchnorm: false
  precision: 32
  enable_model_summary: true
  num_sanity_val_steps: 0
  profiler: null
  benchmark: false
  deterministic: false
  reload_dataloaders_every_n_epochs: 0
  auto_lr_find: false
  replace_sampler_ddp: true
  detect_anomaly: false
  auto_scale_batch_size: false
  plugins: null
  move_metrics_to_cpu: false
  multiple_trainloader_mode: max_size_cycle
